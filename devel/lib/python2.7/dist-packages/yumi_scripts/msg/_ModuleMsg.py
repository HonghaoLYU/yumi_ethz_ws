# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yumi_scripts/ModuleMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import yumi_scripts.msg

class ModuleMsg(genpy.Message):
  _md5sum = "25aac853187c477df279a09006782e49"
  _type = "yumi_scripts/ModuleMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string group_name
ModuleDataMsg module_left
ModuleDataMsg module_right
JointMsg[] joint_trajectory
uint32 total_joints
uint32 total_points
================================================================================
MSG: yumi_scripts/ModuleDataMsg
string group_name
string[] pose_names
PoseConfigMsg[] pose_configs
bool gripper_attached
uint32 total_points
================================================================================
MSG: yumi_scripts/PoseConfigMsg
string group_name
geometry_msgs/Pose pose
int32[] confdata
float64 external_axis_position
bool gripper_attached
float64 gripper_position
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: yumi_scripts/JointMsg
float64[] joint_values"""
  __slots__ = ['group_name','module_left','module_right','joint_trajectory','total_joints','total_points']
  _slot_types = ['string','yumi_scripts/ModuleDataMsg','yumi_scripts/ModuleDataMsg','yumi_scripts/JointMsg[]','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       group_name,module_left,module_right,joint_trajectory,total_joints,total_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ModuleMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.group_name is None:
        self.group_name = ''
      if self.module_left is None:
        self.module_left = yumi_scripts.msg.ModuleDataMsg()
      if self.module_right is None:
        self.module_right = yumi_scripts.msg.ModuleDataMsg()
      if self.joint_trajectory is None:
        self.joint_trajectory = []
      if self.total_joints is None:
        self.total_joints = 0
      if self.total_points is None:
        self.total_points = 0
    else:
      self.group_name = ''
      self.module_left = yumi_scripts.msg.ModuleDataMsg()
      self.module_right = yumi_scripts.msg.ModuleDataMsg()
      self.joint_trajectory = []
      self.total_joints = 0
      self.total_points = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.module_left.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_left.pose_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_left.pose_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.module_left.pose_configs)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_left.pose_configs:
        _x = val1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.confdata)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.confdata))
        _x = val1
        buff.write(_get_struct_dBd().pack(_x.external_axis_position, _x.gripper_attached, _x.gripper_position))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_left.gripper_attached, _x.module_left.total_points))
      _x = self.module_right.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_right.pose_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_right.pose_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.module_right.pose_configs)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_right.pose_configs:
        _x = val1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.confdata)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.confdata))
        _x = val1
        buff.write(_get_struct_dBd().pack(_x.external_axis_position, _x.gripper_attached, _x.gripper_position))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_right.gripper_attached, _x.module_right.total_points))
      length = len(self.joint_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_trajectory:
        length = len(val1.joint_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.joint_values))
      _x = self
      buff.write(_get_struct_2I().pack(_x.total_joints, _x.total_points))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.module_left is None:
        self.module_left = yumi_scripts.msg.ModuleDataMsg()
      if self.module_right is None:
        self.module_right = yumi_scripts.msg.ModuleDataMsg()
      if self.joint_trajectory is None:
        self.joint_trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_left.group_name = str[start:end].decode('utf-8')
      else:
        self.module_left.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_left.pose_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_left.pose_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_left.pose_configs = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.PoseConfigMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_name = str[start:end].decode('utf-8')
        else:
          val1.group_name = str[start:end]
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = _v7.orientation
        _x = _v9
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.confdata = struct.unpack(pattern, str[start:end])
        _x = val1
        start = end
        end += 17
        (_x.external_axis_position, _x.gripper_attached, _x.gripper_position,) = _get_struct_dBd().unpack(str[start:end])
        val1.gripper_attached = bool(val1.gripper_attached)
        self.module_left.pose_configs.append(val1)
      _x = self
      start = end
      end += 5
      (_x.module_left.gripper_attached, _x.module_left.total_points,) = _get_struct_BI().unpack(str[start:end])
      self.module_left.gripper_attached = bool(self.module_left.gripper_attached)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_right.group_name = str[start:end].decode('utf-8')
      else:
        self.module_right.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_right.pose_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_right.pose_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_right.pose_configs = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.PoseConfigMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_name = str[start:end].decode('utf-8')
        else:
          val1.group_name = str[start:end]
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.confdata = struct.unpack(pattern, str[start:end])
        _x = val1
        start = end
        end += 17
        (_x.external_axis_position, _x.gripper_attached, _x.gripper_position,) = _get_struct_dBd().unpack(str[start:end])
        val1.gripper_attached = bool(val1.gripper_attached)
        self.module_right.pose_configs.append(val1)
      _x = self
      start = end
      end += 5
      (_x.module_right.gripper_attached, _x.module_right.total_points,) = _get_struct_BI().unpack(str[start:end])
      self.module_right.gripper_attached = bool(self.module_right.gripper_attached)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_trajectory = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.JointMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.joint_values = struct.unpack(pattern, str[start:end])
        self.joint_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.total_joints, _x.total_points,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.module_left.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_left.pose_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_left.pose_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.module_left.pose_configs)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_left.pose_configs:
        _x = val1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.pose
        _v14 = _v13.position
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.confdata)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.confdata.tostring())
        _x = val1
        buff.write(_get_struct_dBd().pack(_x.external_axis_position, _x.gripper_attached, _x.gripper_position))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_left.gripper_attached, _x.module_left.total_points))
      _x = self.module_right.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_right.pose_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_right.pose_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.module_right.pose_configs)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_right.pose_configs:
        _x = val1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = val1.pose
        _v17 = _v16.position
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.confdata)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.confdata.tostring())
        _x = val1
        buff.write(_get_struct_dBd().pack(_x.external_axis_position, _x.gripper_attached, _x.gripper_position))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_right.gripper_attached, _x.module_right.total_points))
      length = len(self.joint_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_trajectory:
        length = len(val1.joint_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.joint_values.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.total_joints, _x.total_points))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.module_left is None:
        self.module_left = yumi_scripts.msg.ModuleDataMsg()
      if self.module_right is None:
        self.module_right = yumi_scripts.msg.ModuleDataMsg()
      if self.joint_trajectory is None:
        self.joint_trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_left.group_name = str[start:end].decode('utf-8')
      else:
        self.module_left.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_left.pose_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_left.pose_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_left.pose_configs = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.PoseConfigMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_name = str[start:end].decode('utf-8')
        else:
          val1.group_name = str[start:end]
        _v19 = val1.pose
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.confdata = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 17
        (_x.external_axis_position, _x.gripper_attached, _x.gripper_position,) = _get_struct_dBd().unpack(str[start:end])
        val1.gripper_attached = bool(val1.gripper_attached)
        self.module_left.pose_configs.append(val1)
      _x = self
      start = end
      end += 5
      (_x.module_left.gripper_attached, _x.module_left.total_points,) = _get_struct_BI().unpack(str[start:end])
      self.module_left.gripper_attached = bool(self.module_left.gripper_attached)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_right.group_name = str[start:end].decode('utf-8')
      else:
        self.module_right.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_right.pose_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_right.pose_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_right.pose_configs = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.PoseConfigMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_name = str[start:end].decode('utf-8')
        else:
          val1.group_name = str[start:end]
        _v22 = val1.pose
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.confdata = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 17
        (_x.external_axis_position, _x.gripper_attached, _x.gripper_position,) = _get_struct_dBd().unpack(str[start:end])
        val1.gripper_attached = bool(val1.gripper_attached)
        self.module_right.pose_configs.append(val1)
      _x = self
      start = end
      end += 5
      (_x.module_right.gripper_attached, _x.module_right.total_points,) = _get_struct_BI().unpack(str[start:end])
      self.module_right.gripper_attached = bool(self.module_right.gripper_attached)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_trajectory = []
      for i in range(0, length):
        val1 = yumi_scripts.msg.JointMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.joint_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.joint_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.total_joints, _x.total_points,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_dBd = None
def _get_struct_dBd():
    global _struct_dBd
    if _struct_dBd is None:
        _struct_dBd = struct.Struct("<dBd")
    return _struct_dBd
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
