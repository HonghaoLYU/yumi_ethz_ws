// Generated by gencpp from file yumi_scripts/ModuleDataMsg.msg
// DO NOT EDIT!


#ifndef YUMI_SCRIPTS_MESSAGE_MODULEDATAMSG_H
#define YUMI_SCRIPTS_MESSAGE_MODULEDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yumi_scripts/PoseConfigMsg.h>

namespace yumi_scripts
{
template <class ContainerAllocator>
struct ModuleDataMsg_
{
  typedef ModuleDataMsg_<ContainerAllocator> Type;

  ModuleDataMsg_()
    : group_name()
    , pose_names()
    , pose_configs()
    , gripper_attached(false)
    , total_points(0)  {
    }
  ModuleDataMsg_(const ContainerAllocator& _alloc)
    : group_name(_alloc)
    , pose_names(_alloc)
    , pose_configs(_alloc)
    , gripper_attached(false)
    , total_points(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_name_type;
  _group_name_type group_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _pose_names_type;
  _pose_names_type pose_names;

   typedef std::vector< ::yumi_scripts::PoseConfigMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::yumi_scripts::PoseConfigMsg_<ContainerAllocator> >::other >  _pose_configs_type;
  _pose_configs_type pose_configs;

   typedef uint8_t _gripper_attached_type;
  _gripper_attached_type gripper_attached;

   typedef uint32_t _total_points_type;
  _total_points_type total_points;





  typedef boost::shared_ptr< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleDataMsg_

typedef ::yumi_scripts::ModuleDataMsg_<std::allocator<void> > ModuleDataMsg;

typedef boost::shared_ptr< ::yumi_scripts::ModuleDataMsg > ModuleDataMsgPtr;
typedef boost::shared_ptr< ::yumi_scripts::ModuleDataMsg const> ModuleDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yumi_scripts

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'yumi_scripts': ['/home/yumi/yumi_ws/src/yumi/yumi_scripts/msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a67dafea575532d17cc4f00f410a69f";
  }

  static const char* value(const ::yumi_scripts::ModuleDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a67dafea575532dULL;
  static const uint64_t static_value2 = 0x17cc4f00f410a69fULL;
};

template<class ContainerAllocator>
struct DataType< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yumi_scripts/ModuleDataMsg";
  }

  static const char* value(const ::yumi_scripts::ModuleDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string group_name\n\
string[] pose_names\n\
PoseConfigMsg[] pose_configs\n\
bool gripper_attached\n\
uint32 total_points\n\
================================================================================\n\
MSG: yumi_scripts/PoseConfigMsg\n\
string group_name\n\
geometry_msgs/Pose pose\n\
int32[] confdata\n\
float64 external_axis_position\n\
bool gripper_attached\n\
float64 gripper_position\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::yumi_scripts::ModuleDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group_name);
      stream.next(m.pose_names);
      stream.next(m.pose_configs);
      stream.next(m.gripper_attached);
      stream.next(m.total_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yumi_scripts::ModuleDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yumi_scripts::ModuleDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "group_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group_name);
    s << indent << "pose_names[]" << std::endl;
    for (size_t i = 0; i < v.pose_names.size(); ++i)
    {
      s << indent << "  pose_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pose_names[i]);
    }
    s << indent << "pose_configs[]" << std::endl;
    for (size_t i = 0; i < v.pose_configs.size(); ++i)
    {
      s << indent << "  pose_configs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::yumi_scripts::PoseConfigMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.pose_configs[i]);
    }
    s << indent << "gripper_attached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_attached);
    s << indent << "total_points: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.total_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YUMI_SCRIPTS_MESSAGE_MODULEDATAMSG_H
